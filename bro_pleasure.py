import asyncio
import os
import csv
import aiohttp
import gspread
import json


from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import types
from oauth2client.service_account import ServiceAccountCredentials
from gspread.exceptions import WorksheetNotFound
from google.oauth2.service_account import Credentials
from gspread import authorize



# === CONFIG ===
BOT_TOKEN = "8141814127:AAHChhCHyVr1V-O8Y24p5D_aYfjX0BKijG4"
SURVEY_BOT_USERNAME = "MyPleasuresAnketa_bot"
SUPPORT_USERNAME = "@glk341"
PARTNER_CHANNEL_URL = "https://t.me/+W0wll7wwAxw0OGJi"
GOOGLE_APPS_SCRIPT_URL = "https://script.google.com/macros/s/AKfycbzlmJciHpSWM_D0XllohjeDRxqP3FiyOO8jkz6AZx__NO8UUH-6VVsK7kQbgjpNkcQZ/exec"
TRACKING_FILE = "webid_tracking.csv"

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

class WalletForm(StatesGroup):
    wallet = State()

# –ü–æ–ª—É—á–∞–µ–º JSON –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
creds_json = os.getenv("GOOGLE_CREDS")
creds_dict = json.loads(creds_json)
creds_dict["private_key"] = creds_dict["private_key"].replace("\\n", "\n")

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Credentials
scopes = ["https://www.googleapis.com/auth/spreadsheets"]
credentials = Credentials.from_service_account_info(creds_dict, scopes=scopes)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
gc = authorize(credentials)
sheet = gc.open("mpl_ap").worksheet("webmasters")

# === –ú–µ–Ω—é ===
@dp.message(Command("start"))
async def start(message: Message):
    await show_main_menu(message)

def get_main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó –¢—Ä–µ–∫-—Å—Å—ã–ª–∫–∞", callback_data="track_link")],
        [InlineKeyboardButton(text="üìÇ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="materials")],
        [InlineKeyboardButton(text="üí∞ –í—ã–ø–ª–∞—Ç–∞", callback_data="withdraw")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ])

async def show_main_menu(message: Message):
    image = FSInputFile("images/menu.png")
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=image,
        caption="<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã MyPleasures Partners!</b>\n–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_menu()
    )

# === –¢—Ä–µ–∫–∏–Ω–≥ WebID ===
def get_or_create_webid(user_id: int) -> str:
    if os.path.exists(TRACKING_FILE):
        with open(TRACKING_FILE, "r") as f:
            reader = csv.reader(f)
            for row in reader:
                if row and row[1] == str(user_id):
                    return row[0]
    webid = os.urandom(4).hex()
    with open(TRACKING_FILE, "a") as f:
        writer = csv.writer(f)
        writer.writerow([webid, user_id])
    return webid

# === –†–∞–∑–¥–µ–ª—ã ===
@dp.callback_query(F.data == "track_link")
async def handle_track_link(callback: types.CallbackQuery):
    webid = get_or_create_webid(callback.from_user.id)
    link = f"https://t.me/{SURVEY_BOT_USERNAME}?start={webid}"
    image = FSInputFile("images/link.png")
    await bot.send_photo(
        chat_id=callback.from_user.id,
        photo=image,
        caption=f"üîó –¢–≤–æ—è —Ç—Ä–µ–∫-—Å—Å—ã–ª–∫–∞: <code>{link}</code>\n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî {SUPPORT_USERNAME}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    )

@dp.callback_query(F.data == "materials")
async def handle_materials(callback: types.CallbackQuery):
    image = FSInputFile("images/materials.png")
    await bot.send_photo(
        chat_id=callback.from_user.id,
        photo=image,
        caption=f"üìÇ –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ: –∏–¥–µ–∏, –∫—Ä–µ–∞—Ç–∏–≤—ã –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∫–µ.\n\n–ü–æ–¥–∫–ª—é—á–∞–π—Å—è üëâ <a href=\"{PARTNER_CHANNEL_URL}\">–ö–∞–Ω–∞–ª –ü–ü</a>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    )
    
    
# === –ö–æ—à–µ–ª—ë–∫ –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞ ===

@dp.callback_query(F.data == "withdraw")
async def handle_withdraw(callback: types.CallbackQuery):
    image = FSInputFile("images/withdraw.png")
    await bot.send_photo(
        chat_id=callback.from_user.id,
        photo=image,
        caption="üí∞ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª—ë–∫ USDT (TRC20) –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –í–≤–µ—Å—Ç–∏/–∑–∞–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª—ë–∫", callback_data="wallet_input")],
            [InlineKeyboardButton(text="üíº –ú–æ–π –∫–æ—à–µ–ª—ë–∫", callback_data="my_wallet")],
            [InlineKeyboardButton(text="üì§ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data="request_payout")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    )

@dp.callback_query(F.data == "wallet_input")
async def wallet_input(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(WalletForm.wallet)
    await bot.send_message(callback.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:")

@dp.message(WalletForm.wallet)
async def save_wallet(message: types.Message, state: FSMContext):
    wallet = message.text
    user_id = str(message.from_user.id)
    rows = []
    found = False

    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –≤ CSV
    if os.path.exists("wallets.csv"):
        with open("wallets.csv", mode="r") as f:
            reader = csv.reader(f)
            for row in reader:
                if row and row[0] == user_id:
                    rows.append([user_id, wallet])
                    found = True
                else:
                    rows.append(row)

    if not found:
        rows.append([user_id, wallet])

    with open("wallets.csv", mode="w", newline="") as f:
        writer = csv.writer(f)
        writer.writerows(rows)

    # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –≤ Google –¢–∞–±–ª–∏—Ü–µ
    try:
        data = sheet.get_all_values()
        header = data[0]
        user_id_col = header.index("user_id") + 1
        wallet_col = header.index("wallet") + 1
        username_col = header.index("username") + 1

        found_in_sheet = False
        for i, row in enumerate(data[1:], start=2):
            if row and row[user_id_col - 1] == user_id:
                sheet.update_cell(i, wallet_col, wallet)
                found_in_sheet = True
                break

        if not found_in_sheet:
            sheet.append_row([
                user_id,
                message.from_user.username or "",
                "",  # webid
                wallet
            ])

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Google –¢–∞–±–ª–∏—Ü—É: {e}")

    await message.answer("‚úÖ –ö–æ—à–µ–ª—ë–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await state.clear()

@dp.callback_query(F.data == "my_wallet")
async def show_my_wallet(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    wallet = None

    try:
        data = sheet.get_all_values()
        header = data[0]
        user_id_col = header.index("user_id")
        wallet_col = header.index("wallet")

        for row in data[1:]:
            if row and row[user_id_col] == user_id:
                wallet = row[wallet_col]
                break

    except Exception as e:
        await bot.send_message(callback.from_user.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Google –¢–∞–±–ª–∏—Ü–µ:\n<code>{e}</code>")
        return

    if wallet:
        await bot.send_message(callback.from_user.id, f"üíº –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –∫–æ—à–µ–ª—ë–∫:\n<code>{wallet}</code>")
    else:
        await bot.send_message(callback.from_user.id, "‚ö†Ô∏è –£ —Ç–µ–±—è –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–æ—à–µ–ª—ë–∫.")
        
@dp.callback_query(F.data == "request_payout")
async def request_payout(callback: types.CallbackQuery):
    await bot.send_message(callback.from_user.id, "üì§ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –ø—Ä–∏ –±–ª–∏–∂–∞–π—à–µ–π –≤—ã–ø–ª–∞—Ç–µ!")


# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
@dp.callback_query(F.data == "stats")
async def handle_stats(callback: types.CallbackQuery):
    webid = get_or_create_webid(callback.from_user.id)
    url = f"{GOOGLE_APPS_SCRIPT_URL}?webid={webid}"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    total = data.get("total", 0)
                    pending = data.get("pending", 0)
                    approved = data.get("approved", 0)
                    rejected = data.get("rejected", 0)

                    image = FSInputFile("images/stats.png")
                    caption = (
                        "üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
                        f"üë• –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: <b>{total}</b>\n"
                        f"üü° –û–∂–∏–¥–∞—é—Ç: <b>{pending}</b>\n"
                        f"üü¢ –ê–ø—Ä—É–≤: <b>{approved}</b>\n"
                        f"üî¥ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: <b>{rejected}</b>"
                    )
                    await bot.send_photo(
                        chat_id=callback.from_user.id,
                        photo=image,
                        caption=caption,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
                        ])
                    )
                else:
                    await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@dp.callback_query(F.data == "back")
async def handle_back(callback: types.CallbackQuery):
    await show_main_menu(callback.message)

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
